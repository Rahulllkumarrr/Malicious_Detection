from scapy.layers.l2 import *
from scapy.all import *
import pandas as pd


filename="SecondSplit.pcap"


#change to 1 for malicious and 0 for normal packet set
lable=0

packets = RawPcapReader(filename)

i=0
dataset=[]
for ts,meta in packets:
    i+=1
    p = Ether(ts)
    # if i==7:
    #     p.show()
    #     break



    src_mac=p.src
    dst_mac=p.dst
    type=p.type


    if type != 2048:
        # p.show()
        # ip = p.getlayer(IP)
        # ver = ip.version
        # len = ip.len
        # ttl = ip.ttl
        # proto = ip.proto
        #
        # break
        continue

    ip = p.getlayer(IP)
    ver=ip.version
    frag=ip.frag
    len=ip.len
    ttl=ip.ttl
    proto = ip.proto
    # print()
    if proto==6:
        proto="TCP"
    else:
        proto="UDP"



    # if(proto!=6):
    #     continue
    src=ip.src
    dst=ip.dst

    if p.haslayer(ICMP):
        print(i,src_mac, dst_mac)
        p.show()
        continue
    else:
        if proto=="UDP":
            udp=p.getlayer(UDP)
            sport=udp.sport
            dport=udp.dport
        else:

            tcp = p.getlayer(TCP)
            sport=tcp.sport
            dport=tcp.dport

    # list = [src_mac, dst_mac, ver, frag,len, ttl, proto, p.haslayer(TCP),p.haslayer(UDP),p.haslayer(DNS),src, dst,sport,dport,lable]
    # dataset.append(list)


# pd2=pd.DataFrame(dataset)
#
# pd2.to_csv("output.csv",index=False,header=["Source MAC Address",
#                                             "Destination MAC Address",
#                                             "Version",
#                                             "FRAG",
#                                             "Length",
#                                             "Time To Live",
#                                             "Protocol",
#                                             "has_TCP",
#                                             "has_UDP",
#                                             "has_DNS",
#                                             "Source IP",
#                                             "Destination IP",
#                                             "SOURCE PORT",
#                                             "Destination port",
#                                             "Lable"])


